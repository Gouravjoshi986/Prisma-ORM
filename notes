Prisma is an ORM which makes communicating with database easier. 

Simpler syntax (converts objects to SQL queries under the hood)
Abstraction that lets you flip the database you are using
Type safety/Auto completion
Automatic Migrations

In Prisma we define a data model for tabels (Table schema).
## Commands for initializing prisma 
npm install prisma 
npx prisma init

// This Generates a schema.prisma file in which we will write our model and give the connection String via env

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  firstName  String
  lastName   String
} 

A model is defined with keyword model. a object is passed for schema and its types are mentioned 

# Command for migration
npx prisma migrate dev --name message

# Autogenerated Clients  
Prisma needs to automatically create clients for the node file to use when doing operations on database.( using prisma for querries. we need some code which will convert user.find into sql query )
The User class of user table in user.find is generated by prisma with auto gen. clients

npx prisma generate

# Crud Operations in prisma can be easily done by generating a client and using it as prisma.user.create or .update or.read etc  

async function insertUser(username:string,password:string,firstName:string,lastName:string) {
    const res = await prisma.user.create({
        data: {
            username,
            password,
            firstName,
            lastName,
        }
    })
    console.log(res)
}
// insertUser("GouravJoshi","123456","Gourav","joshi");

interface updateParams{
    firstName:string,
    lastName:string,
}

async function updateUser(username:string,{
    firstName,
    lastName,
}:updateParams){
    const res = await prisma.user.update({
        where:{username},
        data:{
            firstName,
            lastName,
        }
    });
    console.log(res)
}

// updateUser("GouravJoshi",{
//     firstName:"Gourav",
//     lastName:"Joshi",
// })

async function getUser(username:string){
    const res = await prisma.user.findFirst({
        where:{
            username:username,
        }
    });
    console.log(res);
}

// getUser("GouravJoshi");


# Relationship In prisma 
Types of relationships
One to One       - Simple todo app 
One to Many
Many to One
Many to Many
 
For the one to one relationship we add the equivalent of a foreign key in our schema.prisma
(look at schema.prisma file)